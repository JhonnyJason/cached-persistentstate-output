// Generated by CoffeeScript 2.6.1
//###########################################################
var backup, basePath, fsA, getBackupPath, getPath, loadBackup;

import pathModule from "path";

import fs from "fs";

//###########################################################
fsA = fs.promises;

//###########################################################
basePath = null;

//###########################################################
export var initialize = function(path) {
  var absoluteBasePath;
  if (path == null) {
    path = "./state";
  }
  if (pathModule.isAbsolute(path)) {
    absoluteBasePath = path;
  } else {
    absoluteBasePath = pathModule.resolve(process.cwd(), path);
  }
  basePath = absoluteBasePath;
  if (!fs.existsSync(basePath)) {
    fs.mkdirSync(basePath);
  }
};

//###########################################################
//region internalFunctions
getPath = function(label) {
  var filename, path;
  filename = label + ".json";
  path = pathModule.resolve(basePath, filename);
  return path;
};

//###########################################################
//region backupFunctions
getBackupPath = function(path) {
  return path + ".backup";
};

backup = function(path) {
  var backupPath, err, newMessage;
  backupPath = getBackupPath(path);
  try {
    fs.copyFileSync(path, backupPath);
  } catch (error) {
    err = error;
    newMessage = "Error: backing up state failed!\n";
    newMessage += "file: " + path + "\n";
    newMessage += "reason: " + err.message;
    throw new Error(newMessage);
  }
};

loadBackup = function(id) {
  var backupPath, contentJson, contentObj, err, path;
  path = getPath(id);
  backupPath = getBackupPath(path);
  try {
    contentJson = fs.readFileSync(backupPath, "utf-8");
    contentObj = JSON.parse(contentJson);
    fsA.writeFile(path, contentJson);
    return {contentObj, contentJson};
  } catch (error) {
    err = error;
    contentObj = null;
    contentJson = null;
    return {contentObj, contentJson};
  }
};


//endregion

//endregion

//###########################################################
//region exposedFunctions
export var load = function(id) {
  var contentJson, contentObj, err, path;
  path = getPath(id);
  try {
    contentJson = fs.readFileSync(path, "utf-8");
    contentObj = JSON.parse(contentJson);
    return {contentObj, contentJson};
  } catch (error) {
    err = error;
    return loadBackup(id);
  }
};

export var save = function(id, contentJson) {
  var path;
  path = getPath(id);
  fs.writeFileSync(path, contentJson);
  backup(path);
};

export var remove = async function(id) {
  var backupPath, err, p1, p2, path;
  path = getPath(id);
  backupPath = getBackupPath(path);
  p1 = fsA.unlink(path);
  p2 = fsA.unlink(backupPath);
  try {
    await Promise.all([p1, p2]);
  } catch (error) {
    err = error;
    return;
  }
};

//endregion

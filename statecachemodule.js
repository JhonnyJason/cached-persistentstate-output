// Generated by CoffeeScript 2.6.1
//###########################################################
//region printLogFunctions
var CacheEntry, cacheHeadEntry, cacheSize, cacheTailEntry, cutCacheTail, defaultState, idToCacheEntry, jsonCache, loadCache, loadDefault, log, maxCacheSize, objCache, olog, toJson, uncache;

log = function(arg) {
  return console.log("[statecache]: " + arg);
};

toJson = function(obj) {
  return JSON.stringify(obj, null, 4);
};

olog = function(obj) {
  return log("\n" + toJson(obj));
};

import * as store from "./statesavermodule";

//###########################################################
jsonCache = {};

objCache = {};

//###########################################################
//caching Stuff
cacheHeadEntry = null;

cacheTailEntry = null;

idToCacheEntry = {};

cacheSize = 0;

maxCacheSize = 64;

defaultState = null;

//###########################################################
export var initialize = function(options) {
  if (options) {
    defaultState = options.defaultState;
    if (options.maxCacheSize != null) {
      maxCacheSize = options.maxCacheSize;
    }
    store.initialize(options.basePath);
  } else {
    store.initialize();
  }
};

//###########################################################
CacheEntry = class CacheEntry {
  constructor(id1) {
    this.id = id1;
    // log "constructor"
    // olog {cacheSize, maxCacheSize}
    this.nextEntry = null;
    this.previousEntry = cacheHeadEntry;
    if (cacheTailEntry == null) {
      cacheTailEntry = this;
    }
    // log "cacheHeadEntry?"+cacheHeadEntry? 
    // log "cacheTailEntry?"+cacheTailEntry?
    if (cacheHeadEntry != null) {
      cacheHeadEntry.nextEntry = this;
    }
    cacheHeadEntry = this;
    idToCacheEntry[this.id] = this;
    cacheSize++;
    // log "cacheHeadEntry?"+cacheHeadEntry? 
    // log "cacheTailEntry?"+cacheTailEntry?
    // olog {cacheSize, maxCacheSize}
    if (cacheSize > maxCacheSize) {
      cutCacheTail();
    }
  }

  // olog {cacheSize, maxCacheSize}
  touch() {
    if (this.nextEntry == null) {
      return; // we are the head
    }
    if (this.previousEntry != null) {
      this.nextEntry.previousEntry = this.previousEntry;
      this.previousEntry.nextEntry = this.nextEntry; // we are the tail
    } else {
      cacheTailEntry = this.nextEntry;
      this.nextEntry.previousEntry = null; // we are in the middle
    }
    this.nextEntry = null;
    this.previousEntry = cacheHeadEntry;
    if (cacheHeadEntry != null) {
      cacheHeadEntry.nextEntry = this;
    }
    cacheHeadEntry = this;
  }

  remove() {
    if ((this.nextEntry != null) && (this.previousEntry != null)) {
      this.nextEntry.previousEntry = this.previousEntry;
      this.previousEntry.nextEntry = this.nextEntry;
    }
    if ((this.nextEntry == null) && (this.previousEntry == null)) {
      cacheHeadEntry = null;
      cacheTailEntry = null;
    }
    if ((this.nextEntry != null) && (this.previousEntry == null)) {
      this.nextEntry.previousEntry = null;
      cacheTailEntry = this.nextEntry;
    }
    if ((this.nextEntry == null) && (this.previousEntry != null)) {
      this.previousEntry.nextEntry = null;
      cacheHeadEntry = this.previousEntry;
    }
    return uncache(this.id);
  }

  toString() {
    var result;
    result = this.id + "\n";
    if (this.nextEntry != null) {
      result += "  next: " + this.nextEntry.id + "\n";
    } else {
      result += "  next: null\n";
    }
    if (this.previousEntry != null) {
      result += "  previous: " + this.previousEntry.id + "\n";
    } else {
      result += "  previous: null\n";
    }
    return result;
  }

};

//###########################################################
//region internalFunctions
loadCache = function(id) {
  var contentJson, contentObj;
  // if !cacheHeadEntry? and !cacheTailEntry? then log "cache is empty!"
  new CacheEntry(id);
  // if !cacheHeadEntry? or !cacheTailEntry? then log "cache has a problem!"
  ({contentObj, contentJson} = store.load(id));
  if (contentObj != null) {
    
    // log "received contentObj"
    jsonCache[id] = contentJson;
    objCache[id] = contentObj;
  } else {
    loadDefault(id);
  }
};

loadDefault = function(id) {
  if ((defaultState == null) || (defaultState[id] == null)) {
    jsonCache[id] = "{}";
    objCache[id] = {};
  } else {
    jsonCache[id] = toJson(defaultState[id]);
    objCache[id] = JSON.parse(jsonCache[id]);
  }
};

//###########################################################
uncache = function(id) {
  delete objCache[id];
  delete jsonCache[id];
  delete idToCacheEntry[id];
  cacheSize--;
};

//###########################################################
cutCacheTail = function() {
  var tail;
  tail = cacheTailEntry;
  if (tail == null) {
    return;
  }
  cacheTailEntry = tail.nextEntry;
  if (cacheTailEntry != null) {
    cacheTailEntry.previousEntry = null;
  }
  uncache(tail.id);
};

//endregion

//###########################################################
//region exposedFunctions
export var save = async function(id, contentObj) {
  var contentJson;
  // log "save "+id
  if (idToCacheEntry[id] != null) {
    idToCacheEntry[id].touch();
  } else {
    new CacheEntry(id);
  }
  if (contentObj) {
    objCache[id] = contentObj;
  }
  contentJson = toJson(objCache[id]);
  if (contentJson === jsonCache[id]) {
    return;
  } else {
    jsonCache[id] = contentJson;
    await store.save(id, contentJson);
  }
};

export var load = function(id) {
  if (objCache[id] == null) {
    loadCache(id);
  } else {
    idToCacheEntry[id].touch();
  }
  return objCache[id];
};

export var remove = async function(id) {
  var entry;
  // log "remove "+id
  entry = idToCacheEntry[id];
  if (entry == null) {
    return;
  }
  entry.remove();
  await store.remove(id);
};

export var logCacheState = function() {
  var entry, logString;
  logString = "cacheState:\n";
  if (cacheHeadEntry != null) {
    logString += "cacheHead Id: " + cacheHeadEntry.id;
    logString += cacheHeadEntry.toString();
    entry = cacheHeadEntry.previousEntry;
    while ((entry != null)) {
      logString += entry.toString();
      entry = entry.previousEntry;
    }
    logString += "cacheTail Id: " + cacheTailEntry.id;
    logString += "\n";
  } else {
    logString += toJson({cacheHeadEntry, cacheTailEntry});
  }
  logString += "- - - - -\n";
  // logString += toJson({jsonCache})
  logString += toJson({cacheSize, maxCacheSize});
  return log(logString);
};

//endregion
